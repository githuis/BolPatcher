
// This file has been generated by the GUI designer. Do not modify.

using System;
using Gtk;

namespace BolPatcher
{
	internal class Gui
	{
		private static bool _initialized;

		internal static void Initialize (Widget iconRenderer)
		{
			if ((_initialized == false)) {
				_initialized = true;
			}
		}
	}

	internal class BinContainer
	{
		private Widget _child;
		
		private UIManager _uimanager;

		public static BinContainer Attach (Bin bin)
		{
			BinContainer bc = new BinContainer ();
			bin.SizeRequested += bc.OnSizeRequested;
			bin.SizeAllocated += bc.OnSizeAllocated;
			bin.Added += bc.OnAdded;
			return bc;
		}

		private void OnSizeRequested (object sender, SizeRequestedArgs args)
		{
			if ((_child != null)) {
				args.Requisition = _child.SizeRequest ();
			}
		}

		private void OnSizeAllocated (object sender, SizeAllocatedArgs args)
		{
			if ((_child != null)) {
				_child.Allocation = args.Allocation;
			}
		}

		private void OnAdded (object sender, AddedArgs args)
		{
			_child = args.Widget;
		}

		public void SetUiManager (UIManager uim)
		{
			_uimanager = uim;
			_child.Realized += OnRealized;
		}

		private void OnRealized (object sender, EventArgs args)
		{
			if ((_uimanager != null)) {
				Widget w;
				w = _child.Toplevel;
				if (((w != null)
				    && typeof(Window).IsInstanceOfType (w))) {
					((Window)(w)).AddAccelGroup (_uimanager.AccelGroup);
					_uimanager = null;
				}
			}
		}
	}

	internal class ActionGroups
	{
		public static ActionGroup GetActionGroup (Type type)
		{
			return GetActionGroup (type.FullName);
		}

		public static ActionGroup GetActionGroup (string name)
		{
			return null;
		}
	}
}
